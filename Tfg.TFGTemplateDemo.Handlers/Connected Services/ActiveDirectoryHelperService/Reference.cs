//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ActiveDirectoryHelperService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActiveDirectoryUser", Namespace="http://schemas.datacontract.org/2004/07/Tfg.ActiveDirectory")]
    public partial class ActiveDirectoryUser : object
    {
        
        private string[] AuthorizationGroupsField;
        
        private string CityField;
        
        private string CompanyNameField;
        
        private string CountryCodeField;
        
        private string CountryNameField;
        
        private System.DateTime CreatedDateField;
        
        private string DepartmentNameField;
        
        private string DisplayNameField;
        
        private string[] DistributionGroupsField;
        
        private string EmailAddressField;
        
        private string EmailAliasField;
        
        private string EmployeeIdField;
        
        private string FirstNameField;
        
        private string FullNameField;
        
        private string HomepageField;
        
        private string IdField;
        
        private string InitialsField;
        
        private bool IsAuthenticatedField;
        
        private string LogOnNameField;
        
        private string ManagerNameField;
        
        private System.DateTime ModifiedDateField;
        
        private string OfficeLocationField;
        
        private string PostalAddressField;
        
        private string PostalCodeField;
        
        private string StreetAddressField;
        
        private string SuburbField;
        
        private string SurnameField;
        
        private string TelephoneNumberField;
        
        private string TitleField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AuthorizationGroups
        {
            get
            {
                return this.AuthorizationGroupsField;
            }
            set
            {
                this.AuthorizationGroupsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City
        {
            get
            {
                return this.CityField;
            }
            set
            {
                this.CityField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName
        {
            get
            {
                return this.CompanyNameField;
            }
            set
            {
                this.CompanyNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryCode
        {
            get
            {
                return this.CountryCodeField;
            }
            set
            {
                this.CountryCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryName
        {
            get
            {
                return this.CountryNameField;
            }
            set
            {
                this.CountryNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedDate
        {
            get
            {
                return this.CreatedDateField;
            }
            set
            {
                this.CreatedDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DepartmentName
        {
            get
            {
                return this.DepartmentNameField;
            }
            set
            {
                this.DepartmentNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName
        {
            get
            {
                return this.DisplayNameField;
            }
            set
            {
                this.DisplayNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] DistributionGroups
        {
            get
            {
                return this.DistributionGroupsField;
            }
            set
            {
                this.DistributionGroupsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailAddress
        {
            get
            {
                return this.EmailAddressField;
            }
            set
            {
                this.EmailAddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailAlias
        {
            get
            {
                return this.EmailAliasField;
            }
            set
            {
                this.EmailAliasField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmployeeId
        {
            get
            {
                return this.EmployeeIdField;
            }
            set
            {
                this.EmployeeIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName
        {
            get
            {
                return this.FirstNameField;
            }
            set
            {
                this.FirstNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName
        {
            get
            {
                return this.FullNameField;
            }
            set
            {
                this.FullNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Homepage
        {
            get
            {
                return this.HomepageField;
            }
            set
            {
                this.HomepageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Initials
        {
            get
            {
                return this.InitialsField;
            }
            set
            {
                this.InitialsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAuthenticated
        {
            get
            {
                return this.IsAuthenticatedField;
            }
            set
            {
                this.IsAuthenticatedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogOnName
        {
            get
            {
                return this.LogOnNameField;
            }
            set
            {
                this.LogOnNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ManagerName
        {
            get
            {
                return this.ManagerNameField;
            }
            set
            {
                this.ManagerNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ModifiedDate
        {
            get
            {
                return this.ModifiedDateField;
            }
            set
            {
                this.ModifiedDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OfficeLocation
        {
            get
            {
                return this.OfficeLocationField;
            }
            set
            {
                this.OfficeLocationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PostalAddress
        {
            get
            {
                return this.PostalAddressField;
            }
            set
            {
                this.PostalAddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PostalCode
        {
            get
            {
                return this.PostalCodeField;
            }
            set
            {
                this.PostalCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StreetAddress
        {
            get
            {
                return this.StreetAddressField;
            }
            set
            {
                this.StreetAddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Suburb
        {
            get
            {
                return this.SuburbField;
            }
            set
            {
                this.SuburbField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Surname
        {
            get
            {
                return this.SurnameField;
            }
            set
            {
                this.SurnameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TelephoneNumber
        {
            get
            {
                return this.TelephoneNumberField;
            }
            set
            {
                this.TelephoneNumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title
        {
            get
            {
                return this.TitleField;
            }
            set
            {
                this.TitleField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActiveDirectoryEntryProperty", Namespace="http://schemas.datacontract.org/2004/07/Tfg.ActiveDirectory")]
    public enum ActiveDirectoryEntryProperty : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        C = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CN = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CO = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Department = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DisplayName = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GivenName = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Initials = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        L = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LastLogOff = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LastLogOn = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LogOnCount = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LogOnHours = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mail = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MailNickname = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Manager = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Name = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PwdLastSet = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PhysicalDeliveryOfficeName = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PostalAddress = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PostalCode = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SamAccountName = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SN = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ST = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StreetAddress = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TelephoneNumber = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Title = 26,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UserPrincipalName = 27,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WhenChanged = 28,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WhenCreated = 29,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WwwHomepage = 30,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ActiveDirectoryHelperService.IActiveDirectoryHelperService")]
    public interface IActiveDirectoryHelperService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/AddUserToAuthorizationGroup", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/AddUserToAuthorizationGroupRespo" +
            "nse")]
        System.Threading.Tasks.Task<bool> AddUserToAuthorizationGroupAsync(string id, string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/AddUserToDistributionGroup", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/AddUserToDistributionGroupRespon" +
            "se")]
        System.Threading.Tasks.Task<bool> AddUserToDistributionGroupAsync(string id, string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/AuthenticateUser", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/AuthenticateUserResponse")]
        System.Threading.Tasks.Task<bool> AuthenticateUserAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/AuthenticateUserByDomain", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/AuthenticateUserByDomainResponse" +
            "")]
        System.Threading.Tasks.Task<bool> AuthenticateUserByDomainAsync(string userName, string password, string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/AuthenticateUserGetUser", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/AuthenticateUserGetUserResponse")]
        System.Threading.Tasks.Task<ActiveDirectoryHelperService.ActiveDirectoryUser> AuthenticateUserGetUserAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/AuthenticateUserWithBasicAuthent" +
            "ication", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/AuthenticateUserWithBasicAuthent" +
            "icationResponse")]
        System.Threading.Tasks.Task<bool> AuthenticateUserWithBasicAuthenticationAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/CreateAuthorizationGroup", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/CreateAuthorizationGroupResponse" +
            "")]
        System.Threading.Tasks.Task CreateAuthorizationGroupAsync(string groupDescription, string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/CreateDistributionGroup", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/CreateDistributionGroupResponse")]
        System.Threading.Tasks.Task CreateDistributionGroupAsync(string groupDescription, string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/CreateGroup", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/CreateGroupResponse")]
        System.Threading.Tasks.Task CreateGroupAsync(string groupDescription, string groupName, bool isSecurityGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/CreateUser", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/CreateUserResponse")]
        System.Threading.Tasks.Task<ActiveDirectoryHelperService.ActiveDirectoryUser> CreateUserAsync(string password, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/DeleteUser", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/DeleteUserResponse")]
        System.Threading.Tasks.Task DeleteUserAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/DisableUser", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/DisableUserResponse")]
        System.Threading.Tasks.Task DisableUserAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/EnableUser", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/EnableUserResponse")]
        System.Threading.Tasks.Task EnableUserAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/ExpireUserPassword", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/ExpireUserPasswordResponse")]
        System.Threading.Tasks.Task ExpireUserPasswordAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/GetGroupMembers", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/GetGroupMembersResponse")]
        System.Threading.Tasks.Task<string[]> GetGroupMembersAsync(string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/GetGroupMembersByDomain", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/GetGroupMembersByDomainResponse")]
        System.Threading.Tasks.Task<string[]> GetGroupMembersByDomainAsync(string groupName, string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/GetGroupMembersByDomainWithEmail" +
            "Address", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/GetGroupMembersByDomainWithEmail" +
            "AddressResponse")]
        System.Threading.Tasks.Task<ActiveDirectoryHelperService.ActiveDirectoryUser[]> GetGroupMembersByDomainWithEmailAddressAsync(string groupName, string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/GetGroupPropertyValue", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/GetGroupPropertyValueResponse")]
        System.Threading.Tasks.Task<string> GetGroupPropertyValueAsync(string groupName, ActiveDirectoryHelperService.ActiveDirectoryEntryProperty propertyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/GetGroupPropertyValueByDomain", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/GetGroupPropertyValueByDomainRes" +
            "ponse")]
        System.Threading.Tasks.Task<string> GetGroupPropertyValueByDomainAsync(string groupName, ActiveDirectoryHelperService.ActiveDirectoryEntryProperty propertyName, string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/GetUserAuthorizationGroupMembers" +
            "hip", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/GetUserAuthorizationGroupMembers" +
            "hipResponse")]
        System.Threading.Tasks.Task<string[]> GetUserAuthorizationGroupMembershipAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/GetUserAuthorizationGroupMembers" +
            "hipByDomain", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/GetUserAuthorizationGroupMembers" +
            "hipByDomainResponse")]
        System.Threading.Tasks.Task<string[]> GetUserAuthorizationGroupMembershipByDomainAsync(string id, string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/GetUserDistributionGroupMembersh" +
            "ip", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/GetUserDistributionGroupMembersh" +
            "ipResponse")]
        System.Threading.Tasks.Task<string[]> GetUserDistributionGroupMembershipAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/GetUserDistributionGroupMembersh" +
            "ipByDomain", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/GetUserDistributionGroupMembersh" +
            "ipByDomainResponse")]
        System.Threading.Tasks.Task<string[]> GetUserDistributionGroupMembershipByDomainAsync(string id, string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/GetUser", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/GetUserResponse")]
        System.Threading.Tasks.Task<ActiveDirectoryHelperService.ActiveDirectoryUser> GetUserAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/GetUserByDomain", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/GetUserByDomainResponse")]
        System.Threading.Tasks.Task<ActiveDirectoryHelperService.ActiveDirectoryUser> GetUserByDomainAsync(string id, string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/IsUserDisabled", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/IsUserDisabledResponse")]
        System.Threading.Tasks.Task<bool> IsUserDisabledAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/IsUserExists", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/IsUserExistsResponse")]
        System.Threading.Tasks.Task<bool> IsUserExistsAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/IsUserExpired", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/IsUserExpiredResponse")]
        System.Threading.Tasks.Task<bool> IsUserExpiredAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/IsUserLocked", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/IsUserLockedResponse")]
        System.Threading.Tasks.Task<bool> IsUserLockedAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/IsUserMemberOfAuthorizationGroup" +
            "", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/IsUserMemberOfAuthorizationGroup" +
            "Response")]
        System.Threading.Tasks.Task<bool> IsUserMemberOfAuthorizationGroupAsync(string id, string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/IsUserMemberOfAuthorizationGroup" +
            "ByDomain", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/IsUserMemberOfAuthorizationGroup" +
            "ByDomainResponse")]
        System.Threading.Tasks.Task<bool> IsUserMemberOfAuthorizationGroupByDomainAsync(string id, string groupName, string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/IsUserMemberOfDistributionGroup", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/IsUserMemberOfDistributionGroupR" +
            "esponse")]
        System.Threading.Tasks.Task<bool> IsUserMemberOfDistributionGroupAsync(string id, string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/IsUserMemberOfDistributionGroupB" +
            "yDomain", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/IsUserMemberOfDistributionGroupB" +
            "yDomainResponse")]
        System.Threading.Tasks.Task<bool> IsUserMemberOfDistributionGroupByDomainAsync(string id, string groupName, string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/RemoveUserFromAuthorizationGroup" +
            "", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/RemoveUserFromAuthorizationGroup" +
            "Response")]
        System.Threading.Tasks.Task<bool> RemoveUserFromAuthorizationGroupAsync(string id, string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/RemoveUserFromDistributionGroup", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/RemoveUserFromDistributionGroupR" +
            "esponse")]
        System.Threading.Tasks.Task<bool> RemoveUserFromDistributionGroupAsync(string id, string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/SetUserPassword", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/SetUserPasswordResponse")]
        System.Threading.Tasks.Task<bool> SetUserPasswordAsync(string id, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/UnlockUser", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/UnlockUserResponse")]
        System.Threading.Tasks.Task<bool> UnlockUserAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveDirectoryHelperService/GetUserIdentity", ReplyAction="http://tempuri.org/IActiveDirectoryHelperService/GetUserIdentityResponse")]
        System.Threading.Tasks.Task<string> GetUserIdentityAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IActiveDirectoryHelperServiceChannel : ActiveDirectoryHelperService.IActiveDirectoryHelperService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class ActiveDirectoryHelperServiceClient : System.ServiceModel.ClientBase<ActiveDirectoryHelperService.IActiveDirectoryHelperService>, ActiveDirectoryHelperService.IActiveDirectoryHelperService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ActiveDirectoryHelperServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ActiveDirectoryHelperServiceClient.GetBindingForEndpoint(endpointConfiguration), ActiveDirectoryHelperServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ActiveDirectoryHelperServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ActiveDirectoryHelperServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ActiveDirectoryHelperServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ActiveDirectoryHelperServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ActiveDirectoryHelperServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<bool> AddUserToAuthorizationGroupAsync(string id, string groupName)
        {
            return base.Channel.AddUserToAuthorizationGroupAsync(id, groupName);
        }
        
        public System.Threading.Tasks.Task<bool> AddUserToDistributionGroupAsync(string id, string groupName)
        {
            return base.Channel.AddUserToDistributionGroupAsync(id, groupName);
        }
        
        public System.Threading.Tasks.Task<bool> AuthenticateUserAsync(string userName, string password)
        {
            return base.Channel.AuthenticateUserAsync(userName, password);
        }
        
        public System.Threading.Tasks.Task<bool> AuthenticateUserByDomainAsync(string userName, string password, string domainName)
        {
            return base.Channel.AuthenticateUserByDomainAsync(userName, password, domainName);
        }
        
        public System.Threading.Tasks.Task<ActiveDirectoryHelperService.ActiveDirectoryUser> AuthenticateUserGetUserAsync(string userName, string password)
        {
            return base.Channel.AuthenticateUserGetUserAsync(userName, password);
        }
        
        public System.Threading.Tasks.Task<bool> AuthenticateUserWithBasicAuthenticationAsync(string userName, string password)
        {
            return base.Channel.AuthenticateUserWithBasicAuthenticationAsync(userName, password);
        }
        
        public System.Threading.Tasks.Task CreateAuthorizationGroupAsync(string groupDescription, string groupName)
        {
            return base.Channel.CreateAuthorizationGroupAsync(groupDescription, groupName);
        }
        
        public System.Threading.Tasks.Task CreateDistributionGroupAsync(string groupDescription, string groupName)
        {
            return base.Channel.CreateDistributionGroupAsync(groupDescription, groupName);
        }
        
        public System.Threading.Tasks.Task CreateGroupAsync(string groupDescription, string groupName, bool isSecurityGroup)
        {
            return base.Channel.CreateGroupAsync(groupDescription, groupName, isSecurityGroup);
        }
        
        public System.Threading.Tasks.Task<ActiveDirectoryHelperService.ActiveDirectoryUser> CreateUserAsync(string password, string userName)
        {
            return base.Channel.CreateUserAsync(password, userName);
        }
        
        public System.Threading.Tasks.Task DeleteUserAsync(string id)
        {
            return base.Channel.DeleteUserAsync(id);
        }
        
        public System.Threading.Tasks.Task DisableUserAsync(string id)
        {
            return base.Channel.DisableUserAsync(id);
        }
        
        public System.Threading.Tasks.Task EnableUserAsync(string id)
        {
            return base.Channel.EnableUserAsync(id);
        }
        
        public System.Threading.Tasks.Task ExpireUserPasswordAsync(string id)
        {
            return base.Channel.ExpireUserPasswordAsync(id);
        }
        
        public System.Threading.Tasks.Task<string[]> GetGroupMembersAsync(string groupName)
        {
            return base.Channel.GetGroupMembersAsync(groupName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetGroupMembersByDomainAsync(string groupName, string domainName)
        {
            return base.Channel.GetGroupMembersByDomainAsync(groupName, domainName);
        }
        
        public System.Threading.Tasks.Task<ActiveDirectoryHelperService.ActiveDirectoryUser[]> GetGroupMembersByDomainWithEmailAddressAsync(string groupName, string domainName)
        {
            return base.Channel.GetGroupMembersByDomainWithEmailAddressAsync(groupName, domainName);
        }
        
        public System.Threading.Tasks.Task<string> GetGroupPropertyValueAsync(string groupName, ActiveDirectoryHelperService.ActiveDirectoryEntryProperty propertyName)
        {
            return base.Channel.GetGroupPropertyValueAsync(groupName, propertyName);
        }
        
        public System.Threading.Tasks.Task<string> GetGroupPropertyValueByDomainAsync(string groupName, ActiveDirectoryHelperService.ActiveDirectoryEntryProperty propertyName, string domainName)
        {
            return base.Channel.GetGroupPropertyValueByDomainAsync(groupName, propertyName, domainName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetUserAuthorizationGroupMembershipAsync(string id)
        {
            return base.Channel.GetUserAuthorizationGroupMembershipAsync(id);
        }
        
        public System.Threading.Tasks.Task<string[]> GetUserAuthorizationGroupMembershipByDomainAsync(string id, string domainName)
        {
            return base.Channel.GetUserAuthorizationGroupMembershipByDomainAsync(id, domainName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetUserDistributionGroupMembershipAsync(string id)
        {
            return base.Channel.GetUserDistributionGroupMembershipAsync(id);
        }
        
        public System.Threading.Tasks.Task<string[]> GetUserDistributionGroupMembershipByDomainAsync(string id, string domainName)
        {
            return base.Channel.GetUserDistributionGroupMembershipByDomainAsync(id, domainName);
        }
        
        public System.Threading.Tasks.Task<ActiveDirectoryHelperService.ActiveDirectoryUser> GetUserAsync(string id)
        {
            return base.Channel.GetUserAsync(id);
        }
        
        public System.Threading.Tasks.Task<ActiveDirectoryHelperService.ActiveDirectoryUser> GetUserByDomainAsync(string id, string domainName)
        {
            return base.Channel.GetUserByDomainAsync(id, domainName);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserDisabledAsync()
        {
            return base.Channel.IsUserDisabledAsync();
        }
        
        public System.Threading.Tasks.Task<bool> IsUserExistsAsync(string id)
        {
            return base.Channel.IsUserExistsAsync(id);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserExpiredAsync(string id)
        {
            return base.Channel.IsUserExpiredAsync(id);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserLockedAsync(string id)
        {
            return base.Channel.IsUserLockedAsync(id);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserMemberOfAuthorizationGroupAsync(string id, string groupName)
        {
            return base.Channel.IsUserMemberOfAuthorizationGroupAsync(id, groupName);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserMemberOfAuthorizationGroupByDomainAsync(string id, string groupName, string domainName)
        {
            return base.Channel.IsUserMemberOfAuthorizationGroupByDomainAsync(id, groupName, domainName);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserMemberOfDistributionGroupAsync(string id, string groupName)
        {
            return base.Channel.IsUserMemberOfDistributionGroupAsync(id, groupName);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserMemberOfDistributionGroupByDomainAsync(string id, string groupName, string domainName)
        {
            return base.Channel.IsUserMemberOfDistributionGroupByDomainAsync(id, groupName, domainName);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveUserFromAuthorizationGroupAsync(string id, string groupName)
        {
            return base.Channel.RemoveUserFromAuthorizationGroupAsync(id, groupName);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveUserFromDistributionGroupAsync(string id, string groupName)
        {
            return base.Channel.RemoveUserFromDistributionGroupAsync(id, groupName);
        }
        
        public System.Threading.Tasks.Task<bool> SetUserPasswordAsync(string id, string password)
        {
            return base.Channel.SetUserPasswordAsync(id, password);
        }
        
        public System.Threading.Tasks.Task<bool> UnlockUserAsync(string id)
        {
            return base.Channel.UnlockUserAsync(id);
        }
        
        public System.Threading.Tasks.Task<string> GetUserIdentityAsync()
        {
            return base.Channel.GetUserIdentityAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IActiveDirectoryHelperService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.TransportCredentialOnly;
                result.Security.Transport.ClientCredentialType = System.ServiceModel.HttpClientCredentialType.Windows;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpsBinding_IActiveDirectoryHelperService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                result.Security.Transport.ClientCredentialType = System.ServiceModel.HttpClientCredentialType.Windows;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IActiveDirectoryHelperService))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IActiveDirectoryHelperService))
            {
                return new System.ServiceModel.EndpointAddress("http://dev-services2.ho.fosltd.co.za:81/ActiveDirectory.1.1/ActiveDirectoryHelper" +
                        "Service.svc");
            }
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpsBinding_IActiveDirectoryHelperService))
            {
                return new System.ServiceModel.EndpointAddress("https://dev-services2.ho.fosltd.co.za/ActiveDirectory.1.1/ActiveDirectoryHelperSe" +
                        "rvice.svc");
            }
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IActiveDirectoryHelperService))
            {
                return new System.ServiceModel.EndpointAddress("net.tcp://dev-webapp06b.ho.fosltd.co.za:809/ActiveDirectory.1.1/ActiveDirectoryHe" +
                        "lperService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IActiveDirectoryHelperService,
            
            BasicHttpsBinding_IActiveDirectoryHelperService,
            
            NetTcpBinding_IActiveDirectoryHelperService,
        }
    }
}
